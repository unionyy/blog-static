<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-19T05:37:02+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">유년시절</title><subtitle>유년이의 블로그. Uniony's blog</subtitle><author><name>유년</name></author><entry><title type="html">오징어 게임 징검다리 건너기 참가자별 성공 확률 2 (파이썬 테스트)</title><link href="http://localhost:4000/life/bridge2/" rel="alternate" type="text/html" title="오징어 게임 징검다리 건너기 참가자별 성공 확률 2 (파이썬 테스트)" /><published>2021-11-16T15:50:30+00:00</published><updated>2021-11-16T15:50:30+00:00</updated><id>http://localhost:4000/life/life-bridge2</id><content type="html" xml:base="http://localhost:4000/life/bridge2/">&lt;hr /&gt;

&lt;p&gt;이전 글에서 수학적으로 계산했던 오징어 게임 징검다리 건너기 참가자별 성공 확률을 코드로 구현하여 테스트해보았습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;게임-함수&quot;&gt;게임 함수&lt;/h2&gt;
&lt;p&gt;게임을 1회 진행하는 함수입니다. level 파라미터는 징검다리의 개수, printBridge는 게임이 끝난 후 징검다리의 모양을 프린트할지 여부입니다. 최초로 성공한 플레이어의 번호를 리턴합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isBroke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isBroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isBroke&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isBroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;게임-1회-진행&quot;&gt;게임 1회 진행&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-images/life-bridge2/1.png&quot; alt=&quot;1 game&quot; /&gt;&lt;/p&gt;

&lt;p&gt;게임을 1회 진행해본 결과 9번 참가자가 최초로 성공했습니다. 16명의 참가자가 있었다면 8명의 참가자가 성공했겠네요. 드라마 오징어게임보다 많이 생존했습니다!&lt;/p&gt;

&lt;h2 id=&quot;게임-100만번-진행&quot;&gt;게임 100만번 진행&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;게임을 100만번 진행하여 최초로 성공한 참가자를 축적하는 코드입니다.&lt;/p&gt;

&lt;h2 id=&quot;플랏&quot;&gt;플랏&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;prob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 결과를 확률로 계산하여 플랏했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/life-bridge2/plot1.png&quot; alt=&quot;plot1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예상대로 이항분포 꼴의 그래프를 얻었습니다!&lt;/p&gt;

&lt;h2 id=&quot;각-참가자별-성공-확률&quot;&gt;각 참가자별 성공 확률&lt;/h2&gt;
&lt;p&gt;위의 확률을 축적하여 각 참가자별 성공 확률을 계산하고 플랏하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resAccum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resAccum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resAccum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resAccum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;accumProb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accumProb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resAccum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumProb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;번 참가자: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumProb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/life-bridge2/plot2.png&quot; alt=&quot;plot2&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1번 참가자: 0.0003%
2번 참가자: 0.0086%
3번 참가자: 0.0688%
4번 참가자: 0.3781%
5번 참가자: 1.5433%
6번 참가자: 4.8335%
7번 참가자: 11.9258%
8번 참가자: 24.0721%
9번 참가자: 40.7867%
10번 참가자: 59.3759%
11번 참가자: 76.0369%
12번 참가자: 88.1458%
13번 참가자: 95.1891%
14번 참가자: 98.4459%
15번 참가자: 99.6244%
16번 참가자: 99.9353%
17번 참가자: 99.9923%
18번 참가자: 99.9996%
19번 참가자: 100.0%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이전 글에서 계산했던 값과 거의 일치하는 결과를 얻었습니다.&lt;/p&gt;

&lt;h2 id=&quot;전체-코드&quot;&gt;전체 코드&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/unionyy/laboratory/blob/main/glass-bridge/bridge.ipynb&quot; target=&quot;_blank&quot;&gt;bridge.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wikidocs.net/92071&quot; target=&quot;_blank&quot;&gt;01. Matplotlib 기본 사용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="Life" /><category term="Squid Game" /><category term="Python" /><summary type="html">이전 글에서 수학적으로 계산했던 오징어 게임 징검다리 건너기 참가자별 성공 확률을 코드로 구현하여 테스트해보았습니다.</summary></entry><entry><title type="html">오징어 게임 징검다리 건너기 참가자별 성공 확률 1 (계산)</title><link href="http://localhost:4000/life/bridge/" rel="alternate" type="text/html" title="오징어 게임 징검다리 건너기 참가자별 성공 확률 1 (계산)" /><published>2021-11-14T06:34:30+00:00</published><updated>2021-11-14T06:34:30+00:00</updated><id>http://localhost:4000/life/life-bridge</id><content type="html" xml:base="http://localhost:4000/life/bridge/">&lt;hr /&gt;

&lt;p&gt;넷플릭스 드라마 “오징어 게임” 의 5번째 게임은 “징검다리 건너기” 입니다. 18쌍의 강화유리와 일반유리로 이루어진 징검다리를 참가자 16명이 차례로 건너는 게임입니다.&lt;/p&gt;

&lt;p&gt;변수가 없는 상황(유리 장인 X, 기억 못하는 경우 X)에서 각 참가자별로 성공할 확률이 얼마나 되는지 계산해보겠습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;참가자-수와-확률&quot;&gt;참가자 수와 확률&lt;/h2&gt;
&lt;p&gt;참가자 수에 상관 없이 N번째 참가자의 성공 확률은 동일합니다. 참가자 번호가 증가할 수록 성공 확률이 증가하다가 19번째 참가자 부터는 무조건 성공하게 됩니다. 오징어 게임에서는 참가자가 16명 이었지만 19번 참가자까지의 성공 확률을 계산해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;전체-경우의-수&quot;&gt;전체 경우의 수&lt;/h2&gt;
&lt;p&gt;전체 경우의 수를 계산해봅시다. 각각의 유리는 깨지거나, 깨지지 않거나 두가지 경우의 수를 갖고 있습니다. 총 18쌍의 유리가 존재하므로 전체 경우의 수는 2^18 = 262,144 가 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;각-참가자별-경우의-수&quot;&gt;각 참가자별 경우의 수&lt;/h2&gt;
&lt;p&gt;첫번째 참가자가 성공할 경우의 수는 18개의 유리가 모두 깨지지 않을 경우입니다. 이는 18C0, 즉 1입니다.&lt;/p&gt;

&lt;p&gt;두번재 참가자가 성공할 경우의 수는 첫번째 참가자가 성공할 확률 + 유리가 1개만 깨질 경우 즉, 18C0 + 18C1 = 19 입니다.&lt;/p&gt;

&lt;p&gt;마찬가지로 세번째 참가자가 성공할 확률은 18C0 + 18C1 + 18C2 = 172 가 됩니다.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;19번째 참가자가 성공할 경우의 수는 18C0 + 18C1 + … + 18C18 = 262,144 입니다. (전체 경우의 수와 같습니다!)&lt;/p&gt;

&lt;h2 id=&quot;확률&quot;&gt;확률&lt;/h2&gt;
&lt;p&gt;위에서 구한 경우의 수를 바탕으로 각 참가자별 성공 확률을 계산해 보았습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;참가자 번호&lt;/th&gt;
      &lt;th&gt;경우의 수(18Cn)&lt;/th&gt;
      &lt;th&gt;누적(Σ18Cn)&lt;/th&gt;
      &lt;th&gt;성공확률&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.000381%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;0.00725%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;153&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;0.0656%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;816&lt;/td&gt;
      &lt;td&gt;988&lt;/td&gt;
      &lt;td&gt;0.377%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3060&lt;/td&gt;
      &lt;td&gt;4048&lt;/td&gt;
      &lt;td&gt;1.544%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;8568&lt;/td&gt;
      &lt;td&gt;12616&lt;/td&gt;
      &lt;td&gt;4.813%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;18564&lt;/td&gt;
      &lt;td&gt;31180&lt;/td&gt;
      &lt;td&gt;11.894%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;31824&lt;/td&gt;
      &lt;td&gt;63004&lt;/td&gt;
      &lt;td&gt;24.034%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;43758&lt;/td&gt;
      &lt;td&gt;106762&lt;/td&gt;
      &lt;td&gt;40.726%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;48620&lt;/td&gt;
      &lt;td&gt;155382&lt;/td&gt;
      &lt;td&gt;59.274%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;43758&lt;/td&gt;
      &lt;td&gt;199140&lt;/td&gt;
      &lt;td&gt;75.966%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;31824&lt;/td&gt;
      &lt;td&gt;230964&lt;/td&gt;
      &lt;td&gt;88.106%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;18564&lt;/td&gt;
      &lt;td&gt;249528&lt;/td&gt;
      &lt;td&gt;95.187%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8568&lt;/td&gt;
      &lt;td&gt;258096&lt;/td&gt;
      &lt;td&gt;98.456%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3060&lt;/td&gt;
      &lt;td&gt;261156&lt;/td&gt;
      &lt;td&gt;99.623%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;816&lt;/td&gt;
      &lt;td&gt;261972&lt;/td&gt;
      &lt;td&gt;99.934%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;153&lt;/td&gt;
      &lt;td&gt;262125&lt;/td&gt;
      &lt;td&gt;99.993%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;262143&lt;/td&gt;
      &lt;td&gt;99.9996%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;262144&lt;/td&gt;
      &lt;td&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;이항분포&quot;&gt;이항분포&lt;/h2&gt;
&lt;p&gt;각 참가자가 본인부터 성공할 확률은 유리가 (본인의 순서 - 1)개 깨질 확률과 같습니다. 이는 성공확률이 1/2 이고, 시행 횟수가 18(유리의 개수)인 이항분포를 따릅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고자료: &lt;a href=&quot;https://bookdown.org/mathemedicine/Stat_book/normal-distribution.html&quot; target=&quot;_blank&quot;&gt;Chapter 3 정규분포(Normal distribution)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 각 참가자가 성공할 확률은 확률이 1/2 이고, 시행 횟수가 18인 이항분포의 누적합입니다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bookdown.org/mathemedicine/Stat_book/normal-distribution.html&quot; target=&quot;_blank&quot;&gt;Chapter 3 정규분포(Normal distribution)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://secstart.tistory.com/970&quot; target=&quot;_blank&quot;&gt;엑셀 COMBIN 함수로 조합수 구하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="Life" /><category term="Squid Game" /><summary type="html">넷플릭스 드라마 “오징어 게임” 의 5번째 게임은 “징검다리 건너기” 입니다. 18쌍의 강화유리와 일반유리로 이루어진 징검다리를 참가자 16명이 차례로 건너는 게임입니다. 변수가 없는 상황(유리 장인 X, 기억 못하는 경우 X)에서 각 참가자별로 성공할 확률이 얼마나 되는지 계산해보겠습니다.</summary></entry><entry><title type="html">삼성전자 SW 역량테스트 B형 후기 3 (두번째 테스트)</title><link href="http://localhost:4000/study/samsungb3/" rel="alternate" type="text/html" title="삼성전자 SW 역량테스트 B형 후기 3 (두번째 테스트)" /><published>2021-11-05T08:15:30+00:00</published><updated>2021-11-05T08:15:30+00:00</updated><id>http://localhost:4000/study/study-samsug3</id><content type="html" xml:base="http://localhost:4000/study/samsungb3/">&lt;hr /&gt;

&lt;p&gt;이전 글에 이어지는 삼성전자 SW 알고리즘 역량테스트 B형 취득 후기입니다. 이번 글에서는 2번의 시험 중 두번째 시험을 치르면서 느낀 점을 정리해보았습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;준비&quot;&gt;준비&lt;/h2&gt;
&lt;p&gt;첫번째 시험에서 떨어졌다고 생각을 하고 두번째 시험은 더 열심히 준비했습니다.&lt;/p&gt;

&lt;p&gt;배웠던 알고리즘들을 다시 한번 살펴보고 제가 구현했던 코드도 다시 읽어보았습니다.&lt;/p&gt;

&lt;p&gt;실전 문제도 시간을 체크하면서 4문제 더 풀었습니다.&lt;/p&gt;

&lt;h2 id=&quot;8월-27일-두번째-시험&quot;&gt;8월 27일 두번째 시험&lt;/h2&gt;
&lt;p&gt;시험 당일 오전에 첫번째 시험의 결과가 메일로 안내되었습니다. 저는 예상한대로 통과하지 못했습니다. 첫시험 결과를 알고 두번째 시험을 봤기 때문에 더 열심히 볼 수 있었던 것 같습니다.&lt;/p&gt;

&lt;p&gt;이번에는 시험에 진지하게 임했고, 메모할 종이도 챙겼습니다.&lt;/p&gt;

&lt;p&gt;문제를 처음 봤을 때는 조금 당황했습니다. 생각치도 못했던 생소한 유형의 문제가 나왔기 때문입니다.&lt;/p&gt;

&lt;p&gt;첫시험에서 제대로 풀어야했다고 후회하다가 마음을 다잡았습니다. 나름 철저히 준비했기 때문에, 제가 풀지 못할 문제는 나오지 않을 것이라고 생각했습니다. 내가 못풀면 아무도 못풀 것이라는 마음으로 자신감을 갖고 문제를 풀기 시작했습니다.&lt;/p&gt;

&lt;h3 id=&quot;아이디어-도출-및-설계&quot;&gt;아이디어 도출 및 설계&lt;/h3&gt;
&lt;p&gt;처음 아이디어를 떠올리는 과정이 제일 어려웠습니다. 어떤 자료구조와 알고리즘을 사용할 수 있는지 하나씩 따져보았습니다. 결국 트리 + DP로 충분히 구현할 수 있겠다는 생각이 떠올랐습니다.&lt;/p&gt;

&lt;p&gt;떠올린 아이디어를 실제로 구현할 수 있도록 구체화하여 코드를 설계했습니다. 구체적인 알고리즘과 노드 구조 등을 철저히 설계하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;구현&quot;&gt;구현&lt;/h3&gt;
&lt;p&gt;구현은 설계한 대로 수월하게 수행하였습니다. 구현 도중에 구조를 조금씩 신중하게 변경하였습니다. 첫번째 시험 때의 실수를 반복하지 않도록, 구조를 변경할 때에는 또다른 문제가 발생하지 않는지 꼭 체크하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;디버깅&quot;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;구현을 모두 마친 뒤에는 테스트해보면서 디버깅을 진행했습니다. 오타 등 자잘한 버그 외에 큰 문제는 없었습니다.&lt;/p&gt;

&lt;h3 id=&quot;최적화&quot;&gt;최적화&lt;/h3&gt;
&lt;p&gt;테스트 결과 실행 시간이 꽤 괜찮게 나왔습니다. 그래도 남은 시간동안 최적화를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;메인 함수를 수정하여 로그를 찍어보면서 불필요한 연산을 제거하였습니다. 또한 트리에서 중복된 노드를 제거하였습니다.&lt;/p&gt;

&lt;p&gt;시험이 종료될 때까지 최적화를 진행하였고, 그 결과 4-5배 정도 빠른 실행시간을 얻을 수 있었습니다. 특수한 버그나 오류가 없으면 무난히 통과할 수 있을 만한 결과를 얻었습니다.&lt;/p&gt;

&lt;h2 id=&quot;시험-결과&quot;&gt;시험 결과&lt;/h2&gt;
&lt;p&gt;8월 27일에 치른 두번째 테스트에 통과하여 삼성전자 SW 알고리즘 역량 테스트 Level B(Pro) 를 취득하였습니다.&lt;/p&gt;</content><author><name>유년</name></author><category term="Study" /><category term="Review" /><category term="Algorithm" /><category term="Samsung" /><summary type="html">이전 글에 이어지는 삼성전자 SW 알고리즘 역량테스트 B형 취득 후기입니다. 이번 글에서는 2번의 시험 중 두번째 시험을 치르면서 느낀 점을 정리해보았습니다.</summary></entry><entry><title type="html">삼성전자 SW 역량테스트 B형 후기 2 (첫번째 테스트)</title><link href="http://localhost:4000/study/samsungb2/" rel="alternate" type="text/html" title="삼성전자 SW 역량테스트 B형 후기 2 (첫번째 테스트)" /><published>2021-10-29T06:25:30+00:00</published><updated>2021-10-29T06:25:30+00:00</updated><id>http://localhost:4000/study/study-samsug2</id><content type="html" xml:base="http://localhost:4000/study/samsungb2/">&lt;hr /&gt;

&lt;p&gt;이전 글에 이어지는 삼성전자 SW 알고리즘 역량테스트 B형 취득 후기입니다. 이번 글에서는 2번의 시험 중 첫번째 시험을 치르면서 느낀 점을 정리해보았습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;삼성전자 SW 알고리즘 역량강화 특강에 참가하여 2번의 B형 테스트를 치를 수 있는 기회를 얻었습니다. 현재 코로나로 인해 상시 테스트가 계속 미뤄지고있는 것으로 알고 있는데, 정말 좋은 기회를 얻었습니다.&lt;/p&gt;

&lt;h2 id=&quot;b형-테스트&quot;&gt;B형 테스트&lt;/h2&gt;
&lt;p&gt;이번 테스트는 최초로 비대면으로 진행되었다고 합니다. VDI (가상 데스크탑) 을 이용하여 대면 시험과 거의 동일한 환경에서 테스트가 진행되었습니다.&lt;/p&gt;

&lt;p&gt;인터넷 접속은 불가능하고 VDI에 설치된 IDE (Visual Studio, Pycharm, Eclipse) 만을 이용할 수 있습니다. 대면시험과 동일한 환경에 화상 감독으로만 변경되었다고 생각하시면 됩니다.&lt;/p&gt;

&lt;p&gt;앞으로 테스트가 어떤 형태로 진행될 지는 모르겠지만 비대면 시험도 괜찮다고 느꼈습니다. 본인이 익숙한 장소에서 익숙한 장비(모니터, 키보드) 로 시험을 치를 수 있고, 직접 왔다갔다하는 번거로움이 없어서 좋았습니다!&lt;/p&gt;

&lt;h2 id=&quot;8월-21일-첫시험&quot;&gt;8월 21일 첫시험&lt;/h2&gt;
&lt;p&gt;첫 시험은 사실 별로 긴장을 하지 않고 봤습니다. 실전문제 몇문제를 풀어본 상태였고 한번의 기회가 더 있었기에 가벼운 마음으로 임했습니다. 심지어 필기할 펜과 종이도 준비하지 않았습니다. (메모장 앱을 사용하였습니다.)&lt;/p&gt;

&lt;p&gt;다소 자만하여 시험에 임했고, 결과적으로는 제대로 당했습니다…&lt;/p&gt;

&lt;p&gt;시험 문제를 봤을 때 첫 느낌은 “너무 쉬운데…?’ 였습니다. 그러나 제약사항을 보고 B형 시험이 테스트하고 싶어하는 것이 무엇인지 깨달았습니다. A형에서는 볼 수 없는 엄청난 사이즈의 제약사항 (1억, 10억…) 을 보았고 어떻게 풀어야할 지 생각해 보았습니다.&lt;/p&gt;

&lt;p&gt;문제 자체는 언젠가 한번쯤 접했을 법한 심플한 문제였습니다. 그러나 사이즈 제약이 커서 효율적으로 동작시키는 것이 관건인 문제였습니다.&lt;/p&gt;

&lt;p&gt;배열을 사용하는 것은 당연히 불가능하고, 저는 세개의 링크드 리스트를 만들어 서로 연관시키는 방식으로 알고리즘을 설계했습니다. 배드 케이스에서는 시간초과가 날 수 있으나 더 효율적인 방식은 존재하지 않는다고 판단하였습니다.&lt;/p&gt;

&lt;p&gt;설계한 대로 구현하던 도중, 링크드리스트를 3개 대신 2개만 이용하여 풀면 코드가 더 간결해질 것이라고 생각했습니다. 2개로 푸나 3개로 푸나 배드케이스는 같아서 시간복잡도에서 손해를 보지 않을 것이라고 생각했습니다. (이게 큰 실수였습니다.)&lt;/p&gt;

&lt;p&gt;그래서 구현 도중 설계를 바꾸었고 그대로 구현을 끝마쳤습니다. 테스트 결과 애매한 시간이 나왔고, 테스트 케이스를 하나씩 체크해보며 어디에서 시간이 많이 소모되는지 확이하였습니다.&lt;/p&gt;

&lt;p&gt;25개의 테스트 케이스 중에서 단 하나의 케이스만 과도하게 시간이 오래 걸리는 것을 확인했습니다. 해당 테스트 케이스를 분석해보았고, 처음 설계했던 대로 3개의 링크드 리스트로 구현했어야 했음을 깨달았습니다.&lt;/p&gt;

&lt;p&gt;그러나 코드의 큰 틀을 바꾸기엔 이미 시간이 너무 지나버렸고, 결국 그대로 제출할 수밖에 없었습니다.&lt;/p&gt;

&lt;p&gt;운이 정말 좋지 않는 이상 통과할 수 없을 것이라고 생각했고, 역시나 이번 테스트에서는 통과하지 못했습니다.&lt;/p&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;p&gt;첫 시험을 치르면서 느낀점이 많았습니다.&lt;/p&gt;

&lt;h3 id=&quot;자만하지-말자&quot;&gt;자만하지 말자&lt;/h3&gt;
&lt;p&gt;처음 보는 시험을 너무 쉽게 생각했던 것 같습니다. 다음 시험은 제대로 준비하고 진지하게 임해야겠다고 생각했습니다.&lt;/p&gt;

&lt;h3 id=&quot;배드-케이스--엣지-케이스&quot;&gt;배드 케이스 &amp;amp; 엣지 케이스&lt;/h3&gt;
&lt;p&gt;제가 처음에 설계했던 알고리즘과 중간에 바꾼 알고리즘의 배드 케이스 시간복잡도는 같았습니다. 그러나 실제로 배드 케이스는 아주 특수한 저격성 시나리오에서만 발생하게 됩니다. 일반적으로 그런 시나리오는 주어지지 않는다고 봅니다.&lt;/p&gt;

&lt;p&gt;일반적인 시나리오에서는 바꾼 구조가 살짝 비효율적이나 시간복잡도는 같았습니다. 둘 다 충분히 통과할 수 있을 만한 시간복잡도를 가집니다.&lt;/p&gt;

&lt;p&gt;그러나 문제는 엣지 케이스에서 발생했습니다. 처음 설계했던 구조에서는 엣지 케이스에서도 일반적인 케이스와 비슷한 시간 복잡도를 가졌습니다. 그러나 두번째 구조에서는 엣지 케이스의 경우에 배드 케이스와 동일한 시간복잡도를 가졌습니다.&lt;/p&gt;

&lt;p&gt;가능한 시나리오를 생각해보고 여러가지 형태의 테스트 케이스에 대해서 생각해 보아야합니다. 이때, 일부러 저격하지 않는 이상 발생하지 않는 시나리오는 배제하여도 무방합니다.&lt;/p&gt;

&lt;h3 id=&quot;구현-도중-설계를-바꿀-경우&quot;&gt;구현 도중 설계를 바꿀 경우&lt;/h3&gt;
&lt;p&gt;만약 제가 중간에 설계를 바꾸지 않았다면 테스트를 통과할 수 있었을 것입니다. 그러나 구현 도중 설계를 바꿔야하는 상황은 빈번하게 발생합니다.&lt;/p&gt;

&lt;p&gt;설계한 대로 100% 구현할 수 있는 상황은 거의 없습니다. 따라서 구현 도중 설계를 바꿔야할 상황이 오면 다시 설계 단계로 돌아가 신중히 생각해보는 과정을 거쳐야합니다.&lt;/p&gt;

&lt;p&gt;제가 설계를 바꿔야겠다고 생각하고 잠시 구현을 멈추고 다시 설계하면서 여러 케이스에 대해 신중히 고민했다면 이번과 같은 실수는 발생하지 않았을 것입니다.&lt;/p&gt;

&lt;p&gt;급하게 코드를 작성하지 않고 신중히 생각하면서 문제를 풀어나가는 자세가 필요합니다.&lt;/p&gt;

&lt;h2 id=&quot;8월-27일-두번째-시험&quot;&gt;8월 27일 두번째 시험&lt;/h2&gt;
&lt;p&gt;첫번째 시험에서 많은 것을 느끼고 두번째 시험은 제대로 준비하고 제대로 치렀습니다.&lt;/p&gt;

&lt;p&gt;이에 대한 내용은 다음 글로 남기겠습니다.&lt;/p&gt;</content><author><name>유년</name></author><category term="Study" /><category term="Review" /><category term="Algorithm" /><category term="Samsung" /><summary type="html">이전 글에 이어지는 삼성전자 SW 알고리즘 역량테스트 B형 취득 후기입니다. 이번 글에서는 2번의 시험 중 첫번째 시험을 치르면서 느낀 점을 정리해보았습니다.</summary></entry><entry><title type="html">[Match-V5] 게임 타입(큐 타입) 알아내기 (Riot API)</title><link href="http://localhost:4000/lol/queue-id/" rel="alternate" type="text/html" title="[Match-V5] 게임 타입(큐 타입) 알아내기 (Riot API)" /><published>2021-10-27T11:52:30+00:00</published><updated>2021-10-27T11:52:30+00:00</updated><id>http://localhost:4000/lol/lol-queueid</id><content type="html" xml:base="http://localhost:4000/lol/queue-id/">&lt;hr /&gt;

&lt;p&gt;Match-V5 에서 큐 타입 (솔랭, 자랭, 일반 등) 은 info 오브젝트의 queueId 필드에 나와있습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;queueid&quot;&gt;queueId&lt;/h2&gt;
&lt;p&gt;queueId 필드는 int를 반환하는데, 이는 각각 큐 타입의 고유 넘버입니다. 큐 타입에 대한 자세한 정보는 공식 문서에서 확인할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://static.developer.riotgames.com/docs/lol/queues.json&quot; target=&quot;_blank&quot;&gt;queues.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://lolog.me/&quot; target=&quot;_blank&quot;&gt;LoLog.me&lt;/a&gt; 에서는 queueId를 다음과 같이 파싱합니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;QUEUETYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Normal Draft Pick&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;420&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;solo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;430&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;440&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aram&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clash&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Deprecated&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;810&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Deprecated&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;820&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Deprecated&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;830&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;840&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;850&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;urf&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;920&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;poro&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ofa&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nbg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;usb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ultimate Spellbook&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tut&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tut&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tut&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한국어로 번역했을 때,&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;solo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;솔랭&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;일반&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aram&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;칼바람&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;자랭&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nbg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;돌넥&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;usb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;궁주문서&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;urf&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;URF&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ofa&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;단일&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AI대전&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;poro&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;포로왕&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tut&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;튜토리얼&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;기타&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;clash&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;격전&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.riotgames.com/docs/lol&quot; target=&quot;_blank&quot;&gt;LoL Documents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lolog.me&quot; target=&quot;_blank&quot;&gt;LoLog.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="LoL" /><category term="Riot API" /><category term="League of Legend" /><summary type="html">Match-V5 에서 큐 타입 (솔랭, 자랭, 일반 등) 은 info 오브젝트의 queueId 필드에 나와있습니다.</summary></entry><entry><title type="html">삼성전자 SW 역량테스트 B형 후기 1 (준비)</title><link href="http://localhost:4000/study/samsungb/" rel="alternate" type="text/html" title="삼성전자 SW 역량테스트 B형 후기 1 (준비)" /><published>2021-10-25T07:05:30+00:00</published><updated>2021-10-25T07:05:30+00:00</updated><id>http://localhost:4000/study/study-samsung-b</id><content type="html" xml:base="http://localhost:4000/study/samsungb/">&lt;hr /&gt;

&lt;p&gt;삼성전자 S/W 알고리즘 특강을 수강하여 운좋게 삼성전자 SW 알고리즘 역량테스트 B형(pro) 을 치를 기회를 얻었습니다. 2회의 기회가 주어졌고 저는 두번째 테스트에서 통과하여 B형을 취득하였습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;이 글은 제가 B형 테스트를 준비하고 2번의 테스트를 치르면서 느낀점들을 바탕으로 작성한 글입니다. 참고 정도로 보시기를 추천드립니다.&lt;/p&gt;

&lt;p&gt;글을 쓰다보니 생각보다 길어져서 이번 포스트에서는 시험 준비 과정에 대한 내용을 다루고 시험을 친 후기는 다음 포스트로 작성하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;a형-테스트와-비교&quot;&gt;A형 테스트와 비교&lt;/h2&gt;

&lt;h3 id=&quot;제약사항&quot;&gt;제약사항&lt;/h3&gt;
&lt;p&gt;지원 언어는 C/C++/Java/Python 으로 같고 라이브러리 또한 사용 가능으로 같습니다. (이전에는 B형의 경우 Python 사용이 불가능하고 라이브러리 사용이 제한되었으나 이번 시험부터 변경되었다고 합니다)&lt;/p&gt;

&lt;h3 id=&quot;문제-수--시간&quot;&gt;문제 수 &amp;amp; 시간&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A형: 3시간 2문제&lt;/li&gt;
  &lt;li&gt;B형: 4시간 1문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A형 시험은 문제를 잘 이해하고 주어진 시간 내에 구현할 수 있는가를 확인하는 테스트라고 느꼈습니다. 문제를 잘 읽고 그대로 구현하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;웬만해선 시간초과나 메모리 초과가 발생할 일이 없을겁니다. (DFS, BFS, DP 등 몇몇 알고리즘만 능숙하게 구현할 수 있으면 통과할 수 있다고 봅니다)&lt;/p&gt;

&lt;p&gt;반면 B형은 주어진 문제를 얼마나 효율적으로 해결할 수 있는가를 봅니다. 문제 자체는 A형보다 간단해서 문제 이해하기는 쉽습니다.&lt;/p&gt;

&lt;p&gt;그러나 제약사항으로 주어지는 사이즈, 횟수 등이 엄청나게 커서 A형처럼 생각나는 대로 구현하기만 하면 시간초과나 메모리 초과로 절대 통과할 수 없습니다.&lt;/p&gt;

&lt;p&gt;여러가지 자료구조나 알고리즘에 대한 이해, 그리고 원하는 대로 변형시키고 능숙하게 구현할 수 있는 능력이 필요합니다.&lt;/p&gt;

&lt;h2 id=&quot;stl-사용&quot;&gt;STL 사용&lt;/h2&gt;
&lt;p&gt;이제 B형 테스트에서도 A형 테스트와 마찬가지로 STL을 사용해도 된다고 합니다. 그러나 저는 STL을 사용하지 않았습니다.&lt;/p&gt;

&lt;p&gt;단순히 STL을 사용하기만 해서 풀 수 있는 문제가 출제되지는 않습니다. 자료구조나 알고리즘을 문제에 맞게 변형하거나 결합시켜야하는 문제들이 출제되므로 저는 오히려 STL을 사용하지 않고 직접 구현하고 변형시키면서 푸는 것이 효율적이라고 느꼈습니다.&lt;/p&gt;

&lt;p&gt;STL을 원하는 대로 능숙하게 사용할 수 있고, 어떻게 동작하는지 잘 이해하고 있는 경우가 아닌 이상 STL 없이 푸는 것을 추천합니다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;a href=&quot;https://swexpertacademy.com/&quot; target=&quot;_blank&quot;&gt;SW Expert Academy&lt;/a&gt; 에 올라온 연습문제 대부분은 STL을 사용할 수 없을 겁니다. (확실하진 않습니다. 아마 그럴 겁니다!)&lt;/p&gt;

&lt;p&gt;1문제를 4시간 동안 푸는 시험이니, STL을 사용하지 않아도 결코 시간이 부족하지 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;준비&quot;&gt;준비&lt;/h2&gt;
&lt;p&gt;저는 삼성전자 알고리즘 역량강화 과정에 참여하여 공부하였습니다. 자세한 내용은 이전에 포스팅했던 글을 참고하세요.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/study/algorithm2021/&quot; target=&quot;_blank&quot;&gt;삼성전자 2021 하계 대학생 S/W 알고리즘 역량강화 특강 수료 후기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;알고리즘-공부&quot;&gt;알고리즘 공부&lt;/h2&gt;
&lt;p&gt;B형 테스트를 통과하기 위해선 여러 알고리즘에 대한 이해가 필요합니다.&lt;/p&gt;

&lt;p&gt;그러나 알고리즘이라고 해봤자 생각보다 복잡하지 않습니다. 대부분 알고리즘 강의에서 배웠던 내용들이고 개념을 이해하고 구현 연습을 하면 어렵지 않습니다. (제가 까다롭다고 느낀 알고리즘은 KMP, LCA 정도입니다)&lt;/p&gt;

&lt;h3 id=&quot;공부해볼만한-키워드&quot;&gt;공부해볼만한 키워드&lt;/h3&gt;
&lt;p&gt;Array, Linked List, Bitwise 연산, Greedy, 완전탐색(Brute-Force), BFS, DFS, DP, 분할정복, Sort, Binary Search, Graph, Dijkstra, Tree, LCA, Heap, Trie, KMP, Hash&lt;/p&gt;

&lt;p&gt;알고리즘 공부를 하면서 자료구조와 알고리즘의 특징이나 시간복잡도에 대한 생각을 많이 하고 잘 이해해야합니다. 위의 키워드들을 다 이해하고 구현할 수 있을 정도면 충분합니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이-연습&quot;&gt;문제 풀이 연습&lt;/h2&gt;

&lt;p&gt;알고리즘 공부가 잘 됐다면 관건은 문제를 보고 알맞은 알고리즘 &amp;amp; 자료구조를 떠올리고 변형 및 적용하는 것입니다. 여러 문제들을 풀어보고 다른 사람의 풀이를 보면서 생각의 흐름을 익히는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;문제를 보고 아이디어가 바로바로 떠오르면 좋겠지만 쉽지 않습니다. 문제를 풀어보면서 특정 자료구조 &amp;amp; 알고리즘을 사용한 이유를 생각해보고 문제의 제약사항 등을 보면서 차근차근 아이디어를 떠올리는 연습을 해야합니다.&lt;/p&gt;

&lt;p&gt;문제는 아래의 흐름대로 풉니다. 무작정 푸는 것보다 효율적이며 시간관리에도 용이합니다.&lt;/p&gt;

&lt;p&gt;문제 이해 -&amp;gt; 아이디어 도출 -&amp;gt; 설계 -&amp;gt; 구현 -&amp;gt; 디버깅 -&amp;gt; 최적화&lt;/p&gt;

&lt;h3 id=&quot;설계&quot;&gt;설계&lt;/h3&gt;
&lt;p&gt;설계과정까지 30분, 넉넉잡아 1시간까지도 줍니다. 설계를 탄탄히 할수록 이후 과정이 수월해지므로 설계에서 시간을 오래 소모했다고 조급해할 필요 없습니다.&lt;/p&gt;

&lt;p&gt;여러가지 시나리오를 생각해보며 효율적인 알고리즘을 선택해야합니다. 특히 엣지 케이스를 고려하여 특정 상황에서 큰 시간이 소모될 경우가 없는지 생각해보아야합니다. (edge case와 bad case는 다릅니다. 저격성 케이스는 주어지지 않는다고 봅니다.)&lt;/p&gt;

&lt;h3 id=&quot;구현&quot;&gt;구현&lt;/h3&gt;
&lt;p&gt;설계를 제대로 했다면 구현은 어렵지 않을 겁니다. 설계한대로 코드만 작성하면됩니다. 그러나 설계할때 생각지 못했던 문제가 발생할 때가 많습니다. 이때는 구현을 잠시 멈추고 다시 설계를 신중히 수정하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;구현하면서 그때그때 되는 대로 설계를 수정하게 되면 또 새로운 문제가 발생할 확률이 높고 설계할 때 고려했던 사항들이 무시되는 상황이 발생할 수 있습니다. 조급해하지 말고 신중히 다시 설계하는게 오히려 효율적입니다.&lt;/p&gt;

&lt;h3 id=&quot;디버깅&quot;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;구현을 끝냈으면 테스트 케이스를 실행해보면서 디버깅을 합니다. 이때 main 함수나 테스트 셋을 수정해보면서 버그를 찾고 엣지 케이스에서 잘 동작하는지 확인합니다.&lt;/p&gt;

&lt;p&gt;B형 테스트는 main 함수는 수정할 수 없고 solution 함수만 구현하면 됩니다. 그러나 디버깅을 하면서 main 함수를 수정하여 로그를 찍는 등의 과정이 필요하므로 문제를 풀면서 main함수를 수정해보는 연습도 해보면 도움이 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;최적화&quot;&gt;최적화&lt;/h3&gt;
&lt;p&gt;디버깅까지 마쳤을 때 시간이 남는다면 최적화를 해줍니다. 중복된 연산, 불필요한 연산 등을 찾아 최적화해줍니다. 시간이 얼마남지 않았다면 시간초과가 나지 않는 이상 무리하게 최적화 작업을 하는 것은 추천하지 않습니다. 마지막에 급하게 제출하면 예상치못한 버그가 발생할 수 있기 때문입니다.&lt;/p&gt;</content><author><name>유년</name></author><category term="Study" /><category term="Review" /><category term="Algorithm" /><category term="Samsung" /><summary type="html">삼성전자 S/W 알고리즘 특강을 수강하여 운좋게 삼성전자 SW 알고리즘 역량테스트 B형(pro) 을 치를 기회를 얻었습니다. 2회의 기회가 주어졌고 저는 두번째 테스트에서 통과하여 B형을 취득하였습니다.</summary></entry><entry><title type="html">삼성전자 2021 하계 대학생 S/W 알고리즘 역량강화 특강 수료 후기</title><link href="http://localhost:4000/study/algorithm2021/" rel="alternate" type="text/html" title="삼성전자 2021 하계 대학생 S/W 알고리즘 역량강화 특강 수료 후기" /><published>2021-10-12T03:05:30+00:00</published><updated>2021-10-12T03:05:30+00:00</updated><id>http://localhost:4000/study/study-samsung-algo-lecture</id><content type="html" xml:base="http://localhost:4000/study/algorithm2021/">&lt;hr /&gt;

&lt;p&gt;2021.07.19 ~ 2021.08.27 6주간 삼성전자 하계 알고리즘 역량강화 특강에 참여하고 수료하였습니다. 이 과정은 삼성전자 SW 역량테스트 B형(Pro) 를 취득하는 것을 목표로 구성된 프로그램입니다. 교육 기간이 종료된 이후에 SW 역량테스트 B형에 응시할 수 있는 기회가 제공됩니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;신청--코딩-테스트&quot;&gt;신청 &amp;amp; 코딩 테스트&lt;/h2&gt;
&lt;p&gt;특강 공고는 카카오톡 SW 개발자 취업 공고 오픈채팅방에서 확인했습니다. 특강 대상자가 SW 역량 테스트 A형에 통과할 수 있을 정도의 사람이기 때문에 공개적으로 모집하지는 않은 것 같습니다. 구글, 네이버에 검색해보아도 특강에 대한 정보나 공고에 대한 정보를 확인할 수 없었습니다.&lt;/p&gt;

&lt;p&gt;지원서를 접수한 뒤에는 코딩테스트가 진행되었습니다. 총 3문제를 풀어야 했고 시간 제한 없이 기간 내에만 제출하면 됐습니다. 코딩테스트 경험이 있거나 어느정도 구현 능력이 있으면 충분히 통과할 수 있을 정도의 문제였던 것 같습니다. 시간제한이 없고 제출도 여러번 할 수 있었기 때문에 마음편히 볼 수 있었습니다.&lt;/p&gt;

&lt;p&gt;테스트 기간이 종료된 바로 다음날 삼성전자 ‘하계 대학생 S/W 알고리즘 역량 강화 특강’ 교육생으로 선정되었다는 메일을 받았고, 바로 3일 뒤에 오리엔테이션이 진행되었습니다.&lt;/p&gt;

&lt;p&gt;테스트는 &lt;a href=&quot;https://swexpertacademy.com/&quot; target=&quot;_blank&quot;&gt;SWEA(SW Expert Academy)&lt;/a&gt; 에서 진행되었고 테스트를 미리 대비하기를 원하면 &lt;a href=&quot;https://swexpertacademy.com/&quot; target=&quot;_blank&quot;&gt;SWEA&lt;/a&gt; 에서 모의 역량테스트를 풀어보기를 추천합니다.&lt;/p&gt;

&lt;h2 id=&quot;오리엔테이션--강사-초빙-강연&quot;&gt;오리엔테이션 &amp;amp; 강사 초빙 강연&lt;/h2&gt;

&lt;p&gt;특강 첫날에는 실시간 온라인 오리엔테이션이 진행되었습니다. 특강 과정에 대한 설명을 들었고, 후반부에는 강사 초빙 강연이 진행되었습니다. 강사님은 알고리즘 교수님(정리해둔 자료를 잃어버려서 성함을 잊어버렸습니다 ㅠ)이었고 알고리즘을 공부해야하는 이유를 재밌게 설명해주셨습니다. 정말 재밌고 유익한 강의여서 알고리즘 공부를 시작하기 전에 의지를 다지는데 큰 도움이 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;기초-학습-4주&quot;&gt;기초 학습 (4주)&lt;/h2&gt;

&lt;p&gt;특강은 기본적으로 비대면 자기주도학습으로 진행되었습니다. 4주의 기초학습과 2주의 실전문제 풀이 실습으로 구성되어 있었습니다.&lt;/p&gt;

&lt;p&gt;4주간의 기초 학습 기간에는 SW 역량테스트 B형을 통과하기 위해 필요한 여러가지 알고리즘들을 배우게 됩니다. 매일 텍스트로 된 설명 + 온라인 강의 + 관련 문제 가 제공되고 제공된 자료들을 적절히 활용하여 자기주도학습을 해야합니다.&lt;/p&gt;

&lt;p&gt;저는 주로 텍스트 설명을 읽으면서 개념를 익히고 문제를 플며 실습했습니다. 온라인 강의는 필요한 부분만 짧게 시청하면서 효율적으로 학습하였습니다.&lt;/p&gt;

&lt;p&gt;기초 학습을 진행하면서 STL을 사용하지 않고 여러가지 알고리즘들을 구현하는 방법 및 코딩테스트에서 활용할 수 있는 성능 향상 기법들을 알차게 배울 수 있었습니다. 또한 관련된 문제를 풀면서 추가로 필요하다고 생각하는 내용들을 구글링해보면서 스스로 학습할 수 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;실전문제-풀이-2주&quot;&gt;실전문제 풀이 (2주)&lt;/h2&gt;

&lt;p&gt;기초 학습 기간이 종료된 이후로는 2주간의 실전문제 풀이 과정이 진행되었습니다.&lt;/p&gt;

&lt;p&gt;첫날에는 실시간 온라인 강의로 B형 테스트가 어떤 형태로 진행되는지 설명해주셨고 여러가지 팁들을 제공해주셨습니다.&lt;/p&gt;

&lt;p&gt;이후로는 2주간 매일 실전문제와 해설 영상이 제공되었습니다. 실전문제는 B형 테스트의 난이도와 비슷한 정도의 문제들이기 때문에 실제로 테스트를 치르는 것 처럼 4시간의 시간 제한을 두고 푸는 것이 좋습니다. 문제를 풀고 제출하면 바로 통과 여부를 확인할 수 있지만, 실제 테스트에서는 테스트 케이스를 10개 밖에 제공해주지 않기 때문에 제출은 최소한으로 하고 정확하게 문제를 푸는 연습을 하는 것을 추천합니다. 해설 강의에서는 문제를 풀때 어떤 흐름으로 생각을 하고 문제를 풀어나가야하는지 설명해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;채용-간담회&quot;&gt;채용 간담회&lt;/h2&gt;

&lt;p&gt;특강 막바지에 실시간 온라인 강의로 채용 간담회가 진행되었습니다. 삼성전자 CE/IM 부문에 대한 안내와 채용 관련 설명을 해주셨습니다.&lt;/p&gt;

&lt;h2 id=&quot;sw-역량테스트-b형-2회&quot;&gt;SW 역량테스트 B형 (2회)&lt;/h2&gt;

&lt;p&gt;특강 과정이 모두 종료된 이후에 2차례(8월 21일, 27일) 의 B형 테스트를 볼 수 있는 기회가 주어졌습니다. 현재 코로나로 인해 상시 SW 역량 테스트가 계속 연기되고 있는 상황이기 때문에 아주 특별한 기회였습니다! 특히 A형을 취득하지 않은 사람도 바로 B형 테스트를 치를 수 있었기 때문에 더더욱 좋은 기회였습니다.&lt;/p&gt;

&lt;p&gt;테스트는 비대면으로 진행되었습니다. SW 역량테스트가 온라인으로 진행된 것은 이번이 처음이라고 합니다. (GSAT을 온라인으로 치를 때에도 역량 테스트는 비대면으로 진행되어 왔습니다)&lt;/p&gt;

&lt;p&gt;VDI를 통해 삼성전자 서버 내의 데스크톱 환경에 접속하여 테스트를 진행하였습니다. 인터넷 검색은 불가능하고 VDI에 설치된 IDE 만을 사용할 수 있습니다. 스마트폰을 통한 화상 감독과 VDI를 통해 오프라인 테스트와 거의 동일한 환경에서 테스트를 진행했던 것 같습니다.&lt;/p&gt;

&lt;p&gt;저는 첫번째 테스트는 아쉽게 통과하지 못했지만 두번째 테스트를 통과하여 Level B (Pro) 를 취득하였습니다. 이는 상시 SW 역량테스트 B형에 통과한 것과 동일한 자격을 취득한 것으로, 삼성전자 공채 지원시 우대를 받고 C형 테스트를 신청할 수 있는 자격을 얻게 됩니다.&lt;/p&gt;

&lt;p&gt;테스트 준비에 관한 내용은 다음 글을 참고하세요.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/study/samsungb/&quot; target=&quot;_blank&quot;&gt;삼성전자 SW 역량테스트 B형 후기 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;수료&quot;&gt;수료&lt;/h2&gt;

&lt;p&gt;삼성전자 2021 하계 S/W 알고리즘 역량강화 특강은 아쉽게도 수료증이 제공되지 않았습니다.&lt;/p&gt;

&lt;p&gt;대신 수료 선물로 &lt;strong&gt;갤럭시 워치 4!!&lt;/strong&gt; 를 받았습니다. (역시 삼성!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/study-algorithm2021/watch.jpg&quot; alt=&quot;Galaxy Watch 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;수료 기준은 온라인 강의 시청이나 문제 풀이를 80% 이상 완료하는 것이라고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;이번 특강은 저에게는 정말 알차고 유익했습니다. 자기주도학습이었기 때문에 매일 원하는 만큼 학습할 수 있다는 점과, 양질의 자료를 제공 받아 필요한 만큼 편하게 학습할 수 있다는 점이 너무 만족스러웠습니다.&lt;/p&gt;

&lt;p&gt;그리고 모든 강의 과정이 &lt;a href=&quot;https://swexpertacademy.com/&quot; target=&quot;_blank&quot;&gt;SWEA&lt;/a&gt; 플랫폼에서 진행되었는데, (실시간 강의 제외) 강사님에게 쉽고 빠르게 질문이나 피드백을 받을 수 있었고, 수강자들끼리 정보 공유 또한 활발하게 이루어졌습니다.&lt;/p&gt;

&lt;p&gt;특강을 수강하면서 학교 강의에서 배웠던 알고리즘들을 다시 한번 체계적으로 정리하는 기회를 가지게 되었습니다. 또한 B형 역량테스트를 통과하기 위한 여러가지 기법들을 배우고 STL을 사용하지 않고 알고리즘을 구현하는 능력을 키울 수 있었습니다.&lt;/p&gt;

&lt;p&gt;SW 역량테스트를 치를 수 있는 기회를 얻어 B형을 취득하고 특강을 수료하여 갤럭시 워치까지 선물로 받아서 얻은 것도 많고 배운 것도 많은 알차고 만족스러운 특강이었습니다.&lt;/p&gt;</content><author><name>유년</name></author><category term="Study" /><category term="Review" /><category term="Algorithm" /><category term="Samsung" /><summary type="html">2021.07.19 ~ 2021.08.27 6주간 삼성전자 하계 알고리즘 역량강화 특강에 참여하고 수료하였습니다. 이 과정은 삼성전자 SW 역량테스트 B형(Pro) 를 취득하는 것을 목표로 구성된 프로그램입니다. 교육 기간이 종료된 이후에 SW 역량테스트 B형에 응시할 수 있는 기회가 제공됩니다.</summary></entry><entry><title type="html">[C++ STL] 순열과 조합 (next_permutation)</title><link href="http://localhost:4000/cpp/next_permutation/" rel="alternate" type="text/html" title="[C++ STL] 순열과 조합 (next_permutation)" /><published>2021-10-10T15:05:30+00:00</published><updated>2021-10-10T15:05:30+00:00</updated><id>http://localhost:4000/cpp/cpp-next_permutation</id><content type="html" xml:base="http://localhost:4000/cpp/next_permutation/">&lt;hr /&gt;

&lt;p&gt;코딩테스트를 보는 도중에 순열을 만들어야하는 상황이 있었습니다. 시간은 15분이 남아있었고, &lt;strong&gt;next_permutation&lt;/strong&gt; 함수 사용법이 정확히 기억나지 않았습니다. (어느 라이브러리에 있는지 생각이 나지 않았습니다 ㅠ)&lt;/p&gt;

&lt;p&gt;Bitwise 연산으로 조합은 구현해본 적이 있었으나 순열은 직접 구현해본 적이 없었습니다. 남은 10분여의 시간동안 순열을 구하는 알고리즘을 생각해내고 구현을 하기란 쉽지 않았고 결국 다 푼 문제를 순열을 만들지 못해 틀리게 되었습니다.&lt;/p&gt;

&lt;p&gt;이번 기회에 &lt;strong&gt;next_permutation&lt;/strong&gt; 함수를 제대로 정리하고 기억해두려합니다. 또한 &lt;strong&gt;next_permutaion&lt;/strong&gt; 함수가 어떻게 생겼는지 살펴보고 순열을 직접 구현할 수 있도록 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;next_permutation-사용법&quot;&gt;next_permutation 사용법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/algorithm/next_permutation&quot; target=&quot;_blank&quot;&gt;std::next_permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;next_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;next_permutation&lt;/strong&gt; 함수는 위와 같이 사용하고 파라미터로 보내진 Iterator 범위 내의 원소들을 다음 경우의 수 배열로 만들어 줍니다. 이 때, 오름차순에서 내림차순으로 가는 경우의 수를 고려합니다.&lt;/p&gt;

&lt;p&gt;즉, 오름차순으로 정렬된 배열에 &lt;strong&gt;next_permutation&lt;/strong&gt; 을 계속 사용하면 모든 경우의 수를 거쳐 결국 내림차순으로 정렬됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;next_permutation&lt;/strong&gt; 함수는 bool 형식의 값을 반환합니다. 함수가 제대로 작동했으면 true 를 리턴하고 이미 배열이 내림차순으로 정렬되어있을 경우에는 false 를 반환합니다.&lt;/p&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;p&gt;다음은 레퍼런스 페이지에서 제공하는 예시입니다.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aba&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* OUTPUT */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* aab    */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* aba    */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* baa    */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next_permutation-함수-살펴보기&quot;&gt;next_permutation 함수 살펴보기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;next_permutation&lt;/strong&gt; 함수는 이렇게 생겼습니다.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BidirIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BidirIt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BidirIt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BidirIt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BidirIt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드의 알고리즘은 이렇습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;맨 뒤에서부터 인접한 두개의 수를 비교한다. (뒤에서부터 내림차순이 아닌 위치를 찾기 위함)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앞의 수(A)가 작을 경우 비교를 멈춘다. (A 뒤에 있는 수들은 내림차순으로 정렬되어있는 상태)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;맨 뒤에서부터 A와 비교하여 A보다 커지는 지점(B)을 찾는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A와 B를 스왑한다. (여전히 뒤의 수들은 내림차순)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;뒤의 수들을 반전시킨다. (내림차순에서 오름차순으로 만든다)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;생각보다 간단하고 깔끔한 알고리즘으로 구현되어 있어서 놀랐습니다. 그래서 코딩 테스트 도중에 구현하지 못하였던 것이 더욱 아쉬웠습니다. 이제 순열을 구현하는 방법은 절대 잊지 않을 것 같습니다!&lt;/p&gt;

&lt;h2 id=&quot;조합으로-사용하기&quot;&gt;조합으로 사용하기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;next_permutation&lt;/strong&gt; 함수는 조합을 구현할 때에도 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;0과 1으로만 이루어진 배열(0이 1보다 앞에 있어야함)을 만들어서 &lt;strong&gt;next_permutation&lt;/strong&gt; 함수를 연속적으로 호출하면 000…0111…1 부터 111…1000…1 까지 모든 경우의 수를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;예시&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// OUTPUT&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 00111&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 01011&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 01101&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 01110&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10011&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10101&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10110&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 11001&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 11010&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 11100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/algorithm/next_permutation&quot; target=&quot;_blank&quot;&gt;std::next_permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="C++" /><category term="C++" /><category term="STL" /><summary type="html">next_permutation 함수는 위와 같이 사용하고 파라미터로 보내진 Iterator 범위 내의 원소들을 다음 경우의 수 배열로 만들어 줍니다. 이 때, 오름차순에서 내림차순으로 가는 경우의 수를 고려합니다. 즉, 오름차순으로 정렬된 배열에 next_permutation 을 계속 사용하면 모든 경우의 수를 거쳐 결국 내림차순으로 정렬됩니다.</summary></entry><entry><title type="html">[Match-V5 업데이트] gameDuration 변경 및 gameEndTimestamp 추가 (Riot API)</title><link href="http://localhost:4000/lol/game-duration/" rel="alternate" type="text/html" title="[Match-V5 업데이트] gameDuration 변경 및 gameEndTimestamp 추가 (Riot API)" /><published>2021-10-08T15:04:30+00:00</published><updated>2021-10-08T15:04:30+00:00</updated><id>http://localhost:4000/lol/lol-gameEndTimestamp</id><content type="html" xml:base="http://localhost:4000/lol/game-duration/">&lt;hr /&gt;

&lt;p&gt;Match-V4 에서 Match-V5 로 넘어가면서 gameDuration(게임 길이) 값이 초단위에서 밀리초단위로 변경되었습니다.&lt;/p&gt;

&lt;p&gt;그러나 11.20 패치 이후로 다시 초단위로 돌아가게 되었고 gameEndTimestamp 라는 필드가 새로 생겨났습니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;riot-api-match-v5-의-공식-안내&quot;&gt;Riot API Match-V5 의 공식 안내&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/post-images/lol-game-duration/new-info.png&quot; alt=&quot;new info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Match-V4 에서 Match-V5 로 넘어가면서 gameDuration의 계산 방식이 바뀌었었나봅니다. 이번 11.20 패치 이후부터는 다시 이전의 방식으로 돌아가게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;gameduration-계산-방식&quot;&gt;gameDuration 계산 방식&lt;/h2&gt;

&lt;h3 id=&quot;1-match-v4-1120-이후의-match-v5&quot;&gt;1. Match-V4, 11.20 이후의 Match-V5&lt;/h3&gt;

&lt;p&gt;게임에 참여한 플레이어들 중에서 가장 오랜 시간동안 게임을 플레이한 유저의 게임 플레이 시간이 gameDuration 이 됩니다. (초 단위의 값입니다)&lt;/p&gt;

&lt;h3 id=&quot;2-1120-이전의-match-v5&quot;&gt;2. 11.20 이전의 Match-V5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;gameEndTimestamp - gameStartTimestamp&lt;/strong&gt;: 
gameEndTimestamp 는 라이엇 서버에서 게임이 종료되었다고 판단되는 시간입니다. gameStartTimestamp 는 게임이 시작된 시간 입니다. (밀리초 단위의 값입니다)&lt;/p&gt;

&lt;h2 id=&quot;이전-방식으로-돌아간-이유&quot;&gt;이전 방식으로 돌아간 이유&lt;/h2&gt;
&lt;p&gt;1번 방식은 결국 마지막 유저가 게임에서 나간 시간이 gameDuration이 됩니다. 2번 방식의 경우에도 사실상 마지막 유저가 게임에서 나간 시간이 게임이 종료된 시간이니 같은 값의 gameDuration을 갖게 될 것입니다.&lt;/p&gt;

&lt;p&gt;그러나 라이엇 서드파티 개발자 커뮤니티에 의하면 특정 서버나 플랫폼의 오류로 인해서 gameEndTimestamp가 실제 게임이 종료된 시간보다 길게 기록되는 경우가 종종 있다고 합니다.&lt;/p&gt;

&lt;p&gt;이러한 이유로 1번 방식의 gameDuration은 종종 부정확한 값을 가지게 되었고 다시 원래의 방식으로 돌아가게 된 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;대응&quot;&gt;대응&lt;/h2&gt;
&lt;p&gt;11.20 패치로 인해 이전 방식으로 돌아갔지만 이전의 게임 로그들은 바뀌지 않았습니다. 따라서 gameDuration 을 불러올 때에 초단위로 쓰였는지 밀리초 단위로 쓰였는지 구분해줄 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;라이엇에서 추천하는 방식은 gameEndTimestamp 필드의 유무로 판단하는 것입니다. 11.20 패치 이후로 gameEndTimestamp 라는 필드가 생겼으니 해당 필드가 존재할 경우 gameDuration 은 초단위로 기록되었을 것이고 존재하지 않을 경우 밀리초 단위로 기록되었을 것입니다.&lt;/p&gt;

&lt;p&gt;아래는 예제 코드 입니다. (gameDuration 파싱 이후 초단위로 처리합니다)&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** gameDuration &amp;amp; gameEndTimestamp Before or After 11.20 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameEndTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.riotgames.com/apis#match-v5/GET_getMatch&quot; target=&quot;_blank&quot;&gt;MATCH-V5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="LoL" /><category term="Riot API" /><category term="League of Legend" /><summary type="html">Match-V4 에서 Match-V5 로 넘어가면서 gameDuration(게임 길이) 값이 초단위에서 밀리초단위로 변경되었습니다. 그러나 11.20 패치 이후로 다시 초단위로 돌아가게 되었고 gameEndTimestamp 라는 필드가 새로 생겨났습니다.</summary></entry><entry><title type="html">[LoLog.me] Match-V5 업데이트</title><link href="http://localhost:4000/lol/lolog-matchv5/" rel="alternate" type="text/html" title="[LoLog.me] Match-V5 업데이트" /><published>2021-10-05T02:13:30+00:00</published><updated>2021-10-05T02:13:30+00:00</updated><id>http://localhost:4000/lol/lolog-matchv5</id><content type="html" xml:base="http://localhost:4000/lol/lolog-matchv5/">&lt;hr /&gt;

&lt;p&gt;Riot API 의 Match-V4 지원이 종료되었습니다. 그래서 &lt;a href=&quot;https://lolog.me/&quot; target=&quot;_blank&quot;&gt;LoLog.me&lt;/a&gt; 서버를 Match-V5 에 맞게 업데이트했습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;난잡한-코드&quot;&gt;난잡한 코드&lt;/h2&gt;

&lt;p&gt;업데이트를 하기 위해 코드를 살펴보니 코드 구조가 굉장히 난잡하고 유지보수를 하기 어렵게 짜여져 있는 것을 발견했습니다.&lt;/p&gt;

&lt;p&gt;아무래도 Node.js 와 기본적인 웹프로그래밍을 공부하면서 실습용으로 만든 사이트였기 때문에 대강 설계하고 손가는 대로 코드를 짰던 것 같습니다.&lt;/p&gt;

&lt;p&gt;이번에 Match-V5 업데이트를 하면서 난잡했던 코드 구조를 깔끔하게 개선하여 리팩토링했습니다. 앞으로는 Riot API 가 바뀌어도 업데이트가 수월할 것입니다.&lt;/p&gt;

&lt;p&gt;아직 개선해야할 부분이 정말 많아서 천천히 구조화 시켜나갈 생각입니다.&lt;/p&gt;

&lt;h2 id=&quot;전적-그래프-삭제&quot;&gt;전적 그래프 삭제&lt;/h2&gt;

&lt;p&gt;안타깝게도 Match-V4 에서 Match-V5 로 넘어가면서 전적 그래프를 제공할 수 없게 되었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;삭제된 전적 그래프
&lt;img src=&quot;/assets/post-images/lolog-matchv5/graph.png&quot; alt=&quot;graph&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전적 그래프로 게임을 얼마나 했는지 한눈에 확인하는 전적 그래프 기능은 &lt;a href=&quot;https://lolog.me/&quot; target=&quot;_blank&quot;&gt;LoLog.me&lt;/a&gt; 의 근본 기능이었습니다.&lt;/p&gt;

&lt;p&gt;전적 그래프로부터 모든 기능이 파생됐고, 웹사이트의 이름이 LoLog.me (롤 로그 미) 인 이유 또한 전적 그래프 때문이었습니다.&lt;/p&gt;

&lt;p&gt;Match-V4 에서는 유저의 간단한 게임 로그를 최대 100개씩 가져올 수 있었습니다. 그러나 Match-V5 로 업데이트 되면서, 유저당 최대 100개씩 가져올 수 있는 정보는 Match ID 밖에 없었습니다.&lt;/p&gt;

&lt;p&gt;이말은 전적 그래프 기능을 계속해서 제공하기 위해서는 Riot API 를 예전보다 100배 더 호출해야 한다는 뜻이고, 이는 Rate Limit 과 반응속도 등의 이유로 불가능한 일입니다.&lt;/p&gt;

&lt;p&gt;그래서 아쉽지만 전적 그래프 제공을 중단하기로 했고 &lt;a href=&quot;https://lolog.me/&quot; target=&quot;_blank&quot;&gt;LoLog.me&lt;/a&gt; 에서 전적 그래프를 제거하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;바뀐-웹사이트&quot;&gt;바뀐 웹사이트&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/lolog-matchv5/new.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전적 그래프를 삭제하니 오히려 페이지가 깔끔해졌다는 장점도 있네요.&lt;/p&gt;

&lt;p&gt;다만 전적 그래프에 통합돼있던 큐 타입별 전적 검색 기능이 사라져 버렸습니다. 이 기능은 다시 깔끔하게 구현하여 추가해야겠습니다.&lt;/p&gt;

&lt;p&gt;+) 웹페이지 테마가 게임 화면 대비 너무 밝아서 게임 화면과 번갈아서 볼 경우 눈이 부실 때가 있습니다. 웹 디자인도 추후에 개선해야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;앞으로-해야할-일&quot;&gt;앞으로 해야할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;코드 구조 개선 작업 지속&lt;/li&gt;
  &lt;li&gt;큐 타입별 검색 기능 구현&lt;/li&gt;
  &lt;li&gt;웹 디자인 개선 (어둡게)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>유년</name></author><category term="LoL" /><category term="League of Legend" /><category term="LoLog.me" /><category term="Node.js" /><summary type="html">Riot API 의 Match-V4 지원이 종료되었습니다. 그래서 LoLog.me 서버를 Match-V5 에 맞게 업데이트했습니다.</summary></entry></feed>